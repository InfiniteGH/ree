{
  "schema_type": "object",
  "schema_version": "0.0.1",
  "name": "simple_format",
  "path": "packages/ree_text/package/ree_text/functions/simple_format.rb",
  "mount_as": "fn",
  "class": "ReeText::SimpleFormat",
  "factory": null,
  "methods": [
    {
      "doc": "Returns +text+ transformed into HTML using simple formatting rules.\nTwo or more consecutive newlines (<tt>\n\n</tt> or <tt>\r\n\r\n</tt>) are\nconsidered a paragraph and wrapped in <tt><p></tt> tags. One newline\n(<tt>\n</tt> or <tt>\r\n</tt>) is considered a linebreak and a\n<tt><br /></tt> tag is appended. This method does not remove the\nnewlines from the +text+.\n\nYou can pass any HTML attributes into <tt>html_options</tt>. These\nwill be added to all created paragraphs.\n\n==== Options\n* <tt>:sanitize</tt> - If +false+, does not sanitize +text+.\n* <tt>:wrapper_tag</tt> - String representing the wrapper tag, defaults to <tt>\"p\"</tt>\n\n==== Examples\n  my_text = \"Here is some basic text...\n...with a line break.\"\n\n  simple_format(my_text)\n  # => \"<p>Here is some basic text...\n<br />...with a line break.</p>\"\n\n  simple_format(my_text, wrapper_tag: \"div\")\n  # => \"<div>Here is some basic text...\n<br />...with a line break.</div>\"\n\n  more_text = \"We want to put a paragraph...\n\n...right there.\"\n\n  simple_format(more_text)\n  # => \"<p>We want to put a paragraph...</p>\n\n<p>...right there.</p>\"\n\n  simple_format(\"Look ma! A class!\", class: 'description')\n  # => \"<p class='description'>Look ma! A class!</p>\"\n\n  simple_format(\"<blink>Unblinkable.</blink>\", sanitize: true)\n  # => \"<p>Unblinkable.</p>\"\n\n  simple_format(\"<blink>Blinkable!</blink> It's true.\", sanitize: false)\n  # => \"<p><blink>Blinkable!</blink> It's true.</p>\"",
      "throws": [

      ],
      "return": "String",
      "args": [
        {
          "arg": "text",
          "type": "Nilor[String]"
        },
        {
          "arg": "opts",
          "type": "Ksplat[:html_options? => Hash, :wrapper_tag? => Or[Symbol, String], :sanitize? => Bool]"
        }
      ]
    }
  ],
  "links": [
    {
      "target": "escape_html",
      "package_name": "ree_text",
      "as": "escape_html",
      "imports": [

      ]
    },
    {
      "target": "is_blank",
      "package_name": "ree_object",
      "as": "is_blank",
      "imports": [

      ]
    },
    {
      "target": "sanitize_html",
      "package_name": "ree_text",
      "as": "sanitize_html",
      "imports": [

      ]
    }
  ]
}