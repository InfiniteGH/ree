{
  "schema_type": "object",
  "schema_version": "1.1",
  "name": "camelize",
  "path": "packages/ree_string/package/ree_string/functions/camelize.rb",
  "mount_as": "fn",
  "class": "ReeString::Camelize",
  "factory": null,
  "methods": [
    {
      "doc": "Converts strings to UpperCamelCase.\nIf the +uppercase_first_letter+ parameter is set to false, then produces\nlowerCamelCase.\n\nAlso converts '/' to '::' which is useful for converting\npaths to namespaces.\n\n  camelize('active_model')                # => \"ActiveModel\"\n  camelize('active_model', false)         # => \"activeModel\"\n  camelize('active_model/errors')         # => \"ActiveModel::Errors\"\n  camelize('active_model/errors', false)  # => \"activeModel::Errors\"\n\nAs a rule of thumb you can think of +camelize+ as the inverse of\n#underscore, though there are cases where that does not hold:\n\n  camelize(underscore('SSLError'))        # => \"SslError\"",
      "throws": [

      ],
      "return": "String",
      "args": [
        {
          "arg": "str",
          "arg_type": "req",
          "type": "String"
        },
        {
          "arg": "opts",
          "arg_type": "keyrest",
          "type": "Ksplat[:uppercase_first_letter? => Bool, :acronyms? => HashOf[String, String]]"
        }
      ]
    }
  ],
  "links": [
    {
      "target": "acronyms_camelize_regex",
      "package_name": "ree_string",
      "as": "acronyms_camelize_regex",
      "imports": [

      ]
    }
  ]
}