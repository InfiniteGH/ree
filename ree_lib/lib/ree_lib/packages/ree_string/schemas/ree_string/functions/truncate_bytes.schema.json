{
  "schema_type": "object",
  "schema_version": "1.1",
  "name": "truncate_bytes",
  "path": "packages/ree_string/package/ree_string/functions/truncate_bytes.rb",
  "mount_as": "fn",
  "class": "ReeString::TruncateBytes",
  "factory": null,
  "methods": [
    {
      "doc": "Truncates +text+ to at most <tt>bytesize</tt> bytes in length without\nbreaking string encoding by splitting multibyte characters or breaking\ngrapheme clusters (\"perceptual characters\") by truncating at combining\ncharacters.\n\n  >> \"ðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ª\".size\n  => 20\n  >> \"ðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ª\".bytesize\n  => 80\n  >> truncate_bytes(\"ðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ªðŸ”ª\", 20)\n  => \"ðŸ”ªðŸ”ªðŸ”ªðŸ”ªâ€¦\"\n\nThe truncated text ends with the <tt>:omission</tt> string, defaulting\nto \"â€¦\", for a total length not exceeding <tt>bytesize</tt>.",
      "throws": [
        "ArgumentError"
      ],
      "return": "String",
      "args": [
        {
          "arg": "str",
          "arg_type": "req",
          "type": "String"
        },
        {
          "arg": "truncate_at",
          "arg_type": "req",
          "type": "Integer"
        },
        {
          "arg": "opts",
          "arg_type": "keyrest",
          "type": "Ksplat[:omission? => String]"
        }
      ]
    }
  ],
  "links": [

  ]
}