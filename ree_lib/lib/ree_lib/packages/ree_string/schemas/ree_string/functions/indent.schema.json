{
  "schema_type": "object",
  "schema_version": "1.0",
  "name": "indent",
  "path": "packages/ree_string/package/ree_string/functions/indent.rb",
  "mount_as": "fn",
  "class": "ReeString::Indent",
  "factory": null,
  "methods": [
    {
      "doc": "Indents the lines in the receiver:\n\n  string = \n  def some_method\n    some_code\n  end\n  indent(string, 2)\n  # =>\n    def some_method\n      some_code\n    end\n\nThe second argument, +indent_string+, specifies which indent string to\nuse. The default is +nil+, which tells the method to make a guess by\npeeking at the first indented line, and fallback to a space if there is\nnone.\n\n  indent(\"  foo\", 2)              # => \"    foo\"\n  indent(\"foo\n\t\tbar\", 2, \"\t\") # => \"\t\tfoo\n\t\t\t\tbar\"\n  indent(\"foo\", 2, \"\t\")          # => \"\t\tfoo\"\n\nWhile +indent_string+ is typically one space or tab, it may be any string.\n\nThe third argument, +empty_lines+, is a flag that says whether\nempty lines should be indented. Default is false.\n\n  indent(\"foo\n\nbar\", 2)                    # => \"  foo\n\n  bar\"\n  indent(\"foo\n\nbar\", 2, empty_lines: true) # => \"  foo\n  \n  bar\"",
      "throws": [

      ],
      "return": "String",
      "args": [
        {
          "arg": "string",
          "type": "String"
        },
        {
          "arg": "amount",
          "type": "Integer"
        },
        {
          "arg": "opts",
          "type": "Ksplat[:indent_string? => String, :empty_lines? => Bool]"
        }
      ]
    }
  ],
  "links": [

  ]
}