{
  "schema_type": "object",
  "ree_version": "0.1.0",
  "name": "http_post",
  "path": "packages/ree_http/package/ree_http/functions/http_post.rb",
  "mount_as": "fn",
  "class": "ReeHttp::HttpPost",
  "factory": null,
  "methods": [
    {
      "doc": "Sends POST request\nReturns response.    \nOptions:\n  url - url of request \n  headers - headers of the request\n  body - body of the request, if File was given file will be read and added to the body as String. Can't use with form_data\n  form_data - form_data of the request, if File was given file, file will be read with specific file_name\n  query_params - query string of the request. Will added after the path like <path>?a=100&b=simple\n  force_ssl - use True that if you want send request with HTTPS protocol. Will be applied with 443 port if protocol in URI is HTTP or HTTPS. If True In other cases will change only protocol, not port. If false, dont change anything\n  auth - can be \"Basic\" or \"Bearer\", use username & password or bearer_token respectively\n\n  strict_redirect_mode - if response code in [300, 301, 302] and strict_redirect_mode=false, will be redirected with GET method, if strict_redirect_mode=true(default) will raise RedirectMethodError\n  redirects_count - count of redirects, if redirects more than redirects_count will raise TooManyRedirectsError\n  timeout - timeout of waiting of response after request was sent, default 60\n  write_timeout - timeout of waiting of sending request, if you send large file maybe should be increased, default 30\n  force_ssl - Turn on/off SSL. This flag must be set before starting session. If you change use_ssl value after session started, a Net::HTTP object raises IOError.\n  ca_certs - adds ca_certs by reading files\n  proxy - auth on proxy server, address required",
      "throws": [

      ],
      "return": "Net::HTTPResponse",
      "args": [
        {
          "arg": "url",
          "type": "String"
        },
        {
          "arg": "opts",
          "type": "Ksplat[:headers? => HashOf[Or[String, Symbol], Or[String, Integer]], :body? => Or[String, Hash, File], :form_data? => HashOf[Or[Symbol, String], Or[Integer, Float, Bool, String, Array, File]], :write_timeout? => Integer, :timeout? => Integer, :redirects_count? => Integer, :strict_redirect_mode? => Bool, :query_params? => HashOf[Or[String, Symbol], Any], :force_ssl? => Bool, :ca_certs? => ArrayOf[File], :basic_auth? => {:username => String, :password => String}, :bearer_token? => String, :proxy? => {:address => String, :port? => Integer, :username? => String, :password? => String}]"
        },
        {
          "arg": "block",
          "type": "Block"
        }
      ]
    }
  ],
  "links": [
    {
      "target": "http_exec",
      "package_name": "ree_http",
      "as": "http_exec",
      "imports": [
        "OPTS_CONTRACT"
      ]
    }
  ]
}