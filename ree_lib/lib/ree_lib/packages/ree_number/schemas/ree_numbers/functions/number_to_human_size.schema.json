{
  "schema_type": "object",
  "ree_version": "0.1.0",
  "name": "number_to_human_size",
  "path": "packages/ree_number/package/ree_number/functions/number_to_human_size.rb",
  "mount_as": "fn",
  "class": "ReeNumber::NumberToHumanSize",
  "factory": null,
  "methods": [
    {
      "doc": "Formats the bytes in +number+ into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.46 KB). This\nmethod is useful for reporting file sizes to users. You can\ncustomize the format in the +options+ hash.\n\nSee <tt>number_to_human</tt> if you want to pretty-print a\ngeneric number.\n\n==== Options\n\n* <tt>:locale</tt> - Sets the locale to be used for formatting\n  (defaults to current locale).\n* <tt>:precision</tt> - Sets the precision of the number\n  (defaults to 3).\n* <tt>:round_mode</tt> - Determine how rounding is performed\n  (defaults to :default. See BigDecimal::mode)\n* <tt>:significant</tt> - If +true+, precision will be the number\n  of significant_digits. If +false+, the number of fractional\n  digits (defaults to +true+)\n* <tt>:separator</tt> - Sets the separator between the\n  fractional and integer digits (defaults to \".\").\n* <tt>:delimiter</tt> - Sets the thousands delimiter (defaults\n  to \"\").\n* <tt>:strip_insignificant_zeros</tt> - If +true+ removes\n  insignificant zeros after the decimal separator (defaults to\n  +true+)\n==== Examples\n  number_to_human_size(123)\n  # => \"123 Bytes\"\n\n  number_to_human_size(1234)\n  # => \"1.21 KB\"\n\n  number_to_human_size(12345)\n  # => \"12.1 KB\"\n  \n  number_to_human_size(1234567)\n  # => \"1.18 MB\"\n\n  number_to_human_size(1234567890)\n  # => \"1.15 GB\"\n\n  number_to_human_size(1234567890123)\n  # => \"1.12 TB\"\n\n  number_to_human_size(1234567890123456)\n  # => \"1.1 PB\"\n\n  number_to_human_size(1234567890123456789)\n  # => \"1.07 EB\"\n\n  number_to_human_size(1234567, precision: 2)\n  # => \"1.2 MB\"\n\n  number_to_human_size(483989, precision: 2)\n  # => \"470 KB\"\n\n  number_to_human_size(483989, precision: 2, round_mode: :up)\n  # => \"480 KB\"\n\n  number_to_human_size(1234567, precision: 2, separator: ',')\n  # => \"1,2 MB\"\n\n  number_to_human_size(1234567890123, precision: 5)\n  # => \"1.1228 TB\"\n\n  number_to_human_size(524288000, precision: 5)\n  # => \"500 MB\"",
      "throws": [

      ],
      "return": "String",
      "args": [
        {
          "arg": "number",
          "type": "Or[Integer, Float, String]"
        },
        {
          "arg": "opts",
          "type": "Ksplat[:locale? => Symbol, :precision? => Integer, :significant? => Bool, :strip_insignificant_zeros? => Bool, :separator? => String, :delimiter? => String, :round_mode? => Or[up, down, truncate, half_up, default, half_down, half_even, banker, ceiling, floor]]"
        }
      ]
    }
  ],
  "links": [
    {
      "target": "number_to_delimited",
      "package_name": "ree_number",
      "as": "number_to_delimited",
      "imports": [

      ]
    },
    {
      "target": "number_to_rounded",
      "package_name": "ree_number",
      "as": "number_to_rounded",
      "imports": [
        "ROUND_MODES"
      ]
    },
    {
      "target": "slice",
      "package_name": "ree_hash",
      "as": "slice",
      "imports": [

      ]
    },
    {
      "target": "t",
      "package_name": "ree_i18n",
      "as": "t",
      "imports": [

      ]
    }
  ]
}